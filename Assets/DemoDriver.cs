using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;

using TMPro;

#if UNITY_PURCHASING && (UNITY_FACEBOOK || !UNITY_WEBGL)
using UnityEngine.Purchasing;
#endif

using System;
using System.Collections;
using System.Collections.Generic;

#if !TEAK_NOT_AVAILABLE
using Facebook.Unity;
#endif

[RequireComponent(typeof(TeakInterface))]
public class DemoDriver : MonoBehaviour
#if UNITY_PURCHASING && (UNITY_FACEBOOK || !UNITY_WEBGL)
, IStoreListener
#endif
{
    public GameObject buttonPrefab;
    public GameObject textPrefab;

    public GameObject buttonContainer;
    public GameObject sdkVersionText;
    public GameObject userIdText;
    public GameObject dropdown;

    public GameObject winCanvas;
    public GameObject winCaption;
    public GameObject winText;

    TeakInterface teakInterface;
    string pushToken;

    int slotSelection = 0;
    List<string> slotNames = new List<string> { "OMG Ponies", "Unicorn Gold", "Spicy Slots", "Golden Pig" };
    List<List<int>> slotReels = new List<List<int>> {
        new List<int> { 1, 2, 3, 4, 2, 4, 3, 1 },
        new List<int> { 2, 2, 1, 4, 3, 3, 2, 4 },
        new List<int> { 3, 4, 1, 1, 2, 1, 2, 3 },
    };
    List<int> slotMulti = new List<int> { 0, 20, 10, 50, 100 };

    int coinBalance;
    int wager = 1000;
    string slotSpin = "<align=\"center\"><sprite=0><sprite=0><sprite=5>";

#if UNITY_PURCHASING && (UNITY_FACEBOOK || !UNITY_WEBGL)
    IStoreController storeController;
#endif

#if (UNITY_PURCHASING && (UNITY_FACEBOOK || !UNITY_WEBGL)) || USE_PRIME31
    string testPurchaseSku = "io.teak.app.sku.dollar";
#endif

    public void LoadMainScene() {
        SceneManager.LoadScene("MainScene");
    }

    void Awake() {
        // Facebook
#if !TEAK_NOT_AVAILABLE
        if (!FB.IsInitialized) {
            FB.Init(() => {
                if (FB.IsInitialized) {
                    FB.ActivateApp();
                }
            });
        } else {
            FB.ActivateApp();
        }

#if USE_PRIME31
        // Prime31 Events
        Prime31.GoogleIABManager.billingSupportedEvent += OnBillingSupported;
        Prime31.GoogleIABManager.queryInventorySucceededEvent += OnQueryInventorySucceeded;
        Prime31.GoogleIABManager.purchaseSucceededEvent += OnPurchaseSucceeded;

        // TODO: Get public key from an autogenerated file
        Prime31.GoogleIAB.init("MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEApVAJ0RF8TMjQaT27Y6guGfxAO/IeYPv/0HyM8AVBzwdC8+XYVwjAP0FWUOdgg4jyFsB7d2HDmdt1HFAa0H6HkyEla2qi4d3iqn86nYD/b2izOp8wWso2C6D0ZsC+TgvmfFHC8LrhcFUInwtmhRJVye7vfC2Rvf6mValhjVUvf0MOnUTg7RTbubZWJr3rvYZftvFYb/0Al5pYqYO7Sls19ctVmARbUL2hQxckqcujbVHo5tV7EHAau+PYFgOL7zH3kSEEzqYIo7LvyVeO+DXyFL8ct7i/W8W4rBMDJwWYBCRndIyoS5NePFH6MrkGNz22WB9NnMU0ytIGbOb/kyGU6wIDAQAB", true);
#elif UNITY_PURCHASING && (UNITY_FACEBOOK || !UNITY_WEBGL)

#if AMAZON
        Debug.Log("Initializing Unity IAP for: Amazon");
        ConfigurationBuilder builder = ConfigurationBuilder.Instance(StandardPurchasingModule.Instance(AppStore.AmazonAppStore));
#else
        Debug.Log("Initializing Unity IAP for: Google Play");
        ConfigurationBuilder builder = ConfigurationBuilder.Instance(StandardPurchasingModule.Instance(AppStore.GooglePlay));
#endif

        builder.AddProduct(this.testPurchaseSku, ProductType.Consumable, new IDs {
            { this.testPurchaseSku, GooglePlay.Name },
            { this.testPurchaseSku, AmazonApps.Name },
            { this.testPurchaseSku, AppleAppStore.Name }
        });

#if TEAK_2_0_OR_NEWER
        Debug.Log("Initializing UnityPurchasing...");
        UnityPurchasing.Initialize(new TeakStoreListener(this), builder);
#endif // #TEAK_2_0_OR_NEWER

#endif // USE_PRIME31
#endif // TEAK_NOT_AVAILABLE

        // Load persist data
        this.slotSelection = PlayerPrefs.GetInt("LastSlot", 0);
        this.coinBalance = PlayerPrefs.GetInt("CoinBalance", 50000);
    }

    void Start() {
        this.teakInterface = GetComponent<TeakInterface>();
        this.teakInterface.OnPushTokenChanged += OnPushTokenChanged;

#if !TEAK_NOT_AVAILABLE
        Teak.Instance.OnLaunchedFromNotification += OnLaunchedFromNotification;
        Teak.Instance.OnReward += OnReward;
#endif // TEAK_NOT_AVAILABLE

        // Dropdown
        Dropdown dropdownComponent = dropdown.GetComponent<Dropdown>();

        dropdownComponent.ClearOptions();
        dropdownComponent.AddOptions(slotNames);
        dropdownComponent.value = this.slotSelection;

        dropdownComponent.onValueChanged.AddListener(delegate {
            this.slotSelection = dropdownComponent.value;
            this.SetupUI();

            PlayerPrefs.SetInt("LastSlot", this.slotSelection);
            PlayerPrefs.Save();
        });

        this.SetupUI();

        // Hide win canvas
        this.winCanvas.GetComponent<Canvas>().enabled = false;
    }

    void OnPushTokenChanged(string pushToken) {
        this.pushToken = pushToken;
        StartCoroutine(Coroutine.DoDuringFixedUpdate(() => {
            this.SetupUI();
        }));
    }

#if !TEAK_NOT_AVAILABLE
    void OnLaunchedFromNotification(TeakNotification notification) {
    }

    void OnReward(TeakReward reward) {
        if (reward.Status == TeakReward.RewardStatus.GrantReward) {
            this.winCanvas.GetComponent<Canvas>().enabled = true;
            var e = reward.Reward.GetEnumerator();
            e.MoveNext();
            var firstElement = e.Current;
            this.winCaption.GetComponent<TextMeshProUGUI>().text = firstElement.Key;
            this.winText.GetComponent<TextMeshProUGUI>().text = String.Format("{0:n0}", Convert.ToInt32(firstElement.Value));
            StartCoroutine(Coroutine.DoAfterSeconds(2, () => {
                this.winCanvas.GetComponent<Canvas>().enabled = false;
            }));
        }
    }

#if USE_PRIME31
    void OnBillingSupported() {
        // TODO: Get SKUs from an autogenerated file
        Prime31.GoogleIAB.queryInventory(new string[] { this.testPurchaseSku });
    }

    void OnQueryInventorySucceeded(List<Prime31.GooglePurchase> purchases, List<Prime31.GoogleSkuInfo> skuInfo) {
        foreach (Prime31.GooglePurchase purchase in purchases) {
            Prime31.GoogleIAB.consumeProduct(purchase.productId);
        }
    }

    void OnPurchaseSucceeded(Prime31.GooglePurchase purchase) {
        Prime31.GoogleIAB.consumeProduct(purchase.productId);
    }
#endif // USE_PRIME31
#endif // TEAK_NOT_AVAILABLE

    private void DoSpin() {
        this.coinBalance -= this.wager;

        List<int> spin = new List<int>();
        foreach(List<int> reel in this.slotReels) {
            spin.Add(reel[UnityEngine.Random.Range(0, reel.Count)]);
        }

        this.slotSpin = "<align=\"center\">";
        int multiLookup = spin[0];
        foreach (int i in spin) {
            this.slotSpin += "<sprite=" + i + ">";
            multiLookup = (i == multiLookup ? multiLookup : 0);
        }

        int winAmount = this.slotMulti[multiLookup] * this.wager;
        if (winAmount > 0) {
            this.winCanvas.GetComponent<Canvas>().enabled = true;
            this.winCaption.GetComponent<TextMeshProUGUI>().text = "WIN";
            this.winText.GetComponent<TextMeshProUGUI>().text = String.Format("{0:n0}", winAmount);
            StartCoroutine(Coroutine.DoAfterSeconds(2, () => {
                this.winCanvas.GetComponent<Canvas>().enabled = false;
            }));
        }
        this.coinBalance += this.slotMulti[multiLookup] * this.wager;
        PlayerPrefs.SetInt("CoinBalance", this.coinBalance);
        PlayerPrefs.Save();
    }

#if UNITY_PURCHASING && (UNITY_FACEBOOK || !UNITY_WEBGL)
    public void OnInitialized(IStoreController controller, IExtensionProvider extensions) {
        Debug.Log("[TestDriver-UnityIAP] OnInitialized");

        this.storeController = controller;

        // Try and clear this pending-purchase issue
        Product product = this.storeController.products.WithID(this.testPurchaseSku);
        if (product != null) {
            Debug.Log("[TestDriver-UnityIAP] Confirming Pending Purchase: " + product);
            this.storeController.ConfirmPendingPurchase(product);
        }
    }

    public void OnInitializeFailed(InitializationFailureReason error) {
        Debug.Log("[TestDriver-UnityIAP] OnInitializeFailed: " + error);
    }

    public void OnPurchaseFailed(Product item, PurchaseFailureReason r) {
        Debug.Log("[TestDriver-UnityIAP] OnPurchaseFailed: " + r);
    }

    public PurchaseProcessingResult ProcessPurchase(PurchaseEventArgs e) {
        Debug.Log("[TestDriver-UnityIAP] OnPurchaseFailed: " + e.purchasedProduct.definition.id);
        return PurchaseProcessingResult.Complete;
    }
#endif // UNITY_PURCHASING && (UNITY_FACEBOOK || !UNITY_WEBGL)

    private void TestThingsThatShouldBeTestedInBetterWays() {
        // Ensure the plugin purchase methods are exposed on Android
#if UNITY_ANDROID && !UNITY_EDITOR
        AndroidJavaClass teak = new AndroidJavaClass("io.teak.sdk.Teak");
        teak.CallStatic("pluginPurchaseSucceeded", "{}", "test");
        teak.CallStatic("pluginPurchaseFailed", 42, "cleanroom");
#endif
    }

    private void SetupUI() {
#if !TEAK_NOT_AVAILABLE
        this.sdkVersionText.GetComponent<Text>().text = "Teak SDK Version: " + Teak.Version;
        this.userIdText.GetComponent<Text>().text = this.teakInterface.TeakUserId;

        // Clear
        foreach (Transform child in this.buttonContainer.transform) {
            Destroy(child.gameObject);
        }

        // If no push token, show button to register (on iOS)
        if (this.pushToken == null) {
#if UNITY_IOS
            Button button = this.CreateButton("Request Push Permissions");
            button.onClick.AddListener(() => {
                UnityEngine.iOS.NotificationServices.RegisterForNotifications(UnityEngine.iOS.NotificationType.Alert |  UnityEngine.iOS.NotificationType.Badge |  UnityEngine.iOS.NotificationType.Sound);
            });
#endif
        }

        // Slot Machine things
        {
            TextMeshProUGUI text = this.CreateText(40, "Slot: " + this.slotNames[this.slotSelection]);
            text.fontStyle = FontStyles.Bold;
        }

        {
            TextMeshProUGUI text = this.CreateText(28, "Coins: " + String.Format("{0:n0}", this.coinBalance));
            text.fontStyle = FontStyles.Bold;
            text.color = Color.yellow;
        }

        {
            TextMeshProUGUI text = this.CreateText(28, "Wager: " + String.Format("{0:n0}", this.wager));
            text.fontStyle = FontStyles.Bold;
            text.color = Color.yellow;
        }

        {
            this.CreateText(100, this.slotSpin);
            Button button = this.CreateButton("Spin!");
            button.onClick.AddListener(() => {
                this.DoSpin();
                this.SetupUI();
            });
        }

    // 10% chance of 5x, 20% chance of 2x, 10% chance of 1x, 30% chance of 0.5x, rest 0x

        // Facebook Login/Logout
        // if (FB.IsLoggedIn) {
        //     Button button = this.CreateButton("Facebook Logout");
        //     button.onClick.AddListener(() => {
        //         FB.LogOut();
        //         SetupUI();
        //     });
        // } else {
        //     Button button = this.CreateButton("Facebook Login");
        //     button.onClick.AddListener(() => {
        //         var perms = new List<string>(){"public_profile", "email"};
        //         FB.LogInWithReadPermissions(perms, (ILoginResult result) => {
        //             SetupUI();
        //         });
        //     });
        // }

#endif // TEAK_NOT_AVAILABLE
    }

    private TextMeshProUGUI CreateText(string textString) {
        GameObject go = this.InstantiateInContainer(this.textPrefab);
        TextMeshProUGUI text = go.GetComponent<TextMeshProUGUI>();
        text.text = textString;
        return text;
    }

    private TextMeshProUGUI CreateText(int fontSize, string textString) {
        return this.CreateText(fontSize, 5, textString);
    }

    private TextMeshProUGUI CreateText(int fontSize, int spacing, string textString) {
        TextMeshProUGUI text = this.CreateText(textString);
        text.fontSize = fontSize;
        RectTransform xfm = text.GetComponent<RectTransform>();
        xfm.sizeDelta = new Vector2(xfm.sizeDelta.x, text.fontSize + spacing);
        return text;
    }

    private Button CreateButton(string label) {
        GameObject go = this.InstantiateInContainer(this.buttonPrefab);
        Text[] buttonText = go.GetComponentsInChildren<Text>();
        buttonText[0].text = label;

        return go.GetComponent<Button>();
    }

    private GameObject InstantiateInContainer(GameObject prefab) {
        GameObject go = Instantiate(prefab) as GameObject;
        go.transform.SetParent(this.buttonContainer.transform, false);
        return go;
    }
}
